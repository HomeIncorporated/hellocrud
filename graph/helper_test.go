// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package graph

import (
	"reflect"
	"strconv"
	"testing"

	graphql "github.com/graph-gophers/graphql-go"
	"github.com/stretchr/testify/assert"
)

func strptr(s string) *string {
	return &s
}

func bool2ptr(b bool) *bool {
	return &b
}

func base64ptr(b Base64) *Base64 {
	return &b
}

func floatptr(f float64) *float64 {
	return &f
}

func intptr(i int32) *int32 {
	return &i
}

func int64ptr(i Int64) *Int64 {
	return &i
}

func textptr(t Text) *Text {
	return &t
}

func timeptr(t graphql.Time) *graphql.Time {
	return &t
}

func TestQueryModSearch(t *testing.T) {
	testCases := []struct {
		givenInput interface{}
	}{
		{
			givenInput: (*searchCommentInput)(nil),
		},
		{
			givenInput: &searchCommentInput{
				PostID: intptr(42),
				Author: strptr("lorem ipsum"),
				Body:   strptr("lorem ipsum"),
				Notes:  strptr("lorem ipsum"),
			},
		},
		{
			givenInput: (*searchPostInput)(nil),
		},
		{
			givenInput: &searchPostInput{
				Title:  strptr("lorem ipsum"),
				Author: strptr("lorem ipsum"),
				Body:   strptr("lorem ipsum"),
				Notes:  strptr("lorem ipsum"),
			},
		},
	}

	for i, tc := range testCases {
		t.Run(strconv.Itoa(i), func(t *testing.T) {
			result := QueryModSearch(tc.givenInput)
			expectResultsLength := 0
			v := reflect.ValueOf(tc.givenInput).Elem()
			if v.IsValid() {
				for i := 0; i < v.NumField(); i++ {
					value := v.Field(i) // Value
					if (value.Kind() == reflect.Ptr && value.IsNil()) || !value.IsValid() {
						// Skip if field is nil
						continue
					}
					expectResultsLength = expectResultsLength + 1
				}
			}
			assert.Len(t, result, expectResultsLength)
		})
	}
}
