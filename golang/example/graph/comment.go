// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package graph

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/choonkeat/hellocrud/golang/example/dbmodel"
	graphql "github.com/graph-gophers/graphql-go"
	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries/qm"
)

// Comment is an object to back GraphQL type
type Comment struct {
	model dbmodel.Comment
	db    boil.Executor
}

// GraphQL friendly getters

func (o Comment) RowID() string {
	return fmt.Sprintf("Comment%d", o.model.ID) // int
}
func (o Comment) ID() graphql.ID {
	return graphql.ID(fmt.Sprintf("%d", o.model.ID)) // int
}
func (o Comment) PostID() int32 {
	return int32(o.model.PostID) // int
}
func (o Comment) Author() string {
	return o.model.Author // string
}
func (o Comment) Body() string {
	return o.model.Body // string
}
func (o Comment) Notes() *string {
	return o.model.Notes.Ptr() // null.String
}
func (o Comment) CreatedAt() *graphql.Time {
	if o.model.CreatedAt.Valid {
		return &graphql.Time{Time: o.model.CreatedAt.Time}
	}
	return nil // null.Time
}
func (o Comment) UpdatedAt() *graphql.Time {
	if o.model.UpdatedAt.Valid {
		return &graphql.Time{Time: o.model.UpdatedAt.Time}
	}
	return nil // null.Time
}

// Comment is an object to back GraphQL type
type createCommentInput struct {
	PostID    int32
	Author    string
	Body      string
	Notes     *string
	UpdatedAt *graphql.Time
}

// Comment is an object to back GraphQL type
type updateCommentInput struct {
	PostID    int32
	Author    string
	Body      string
	Notes     *string
	UpdatedAt *graphql.Time
}

type CommentsCollection struct {
	nodes []Comment
	// future meta data goes here, e.g. count
}

func (c CommentsCollection) Nodes(ctx context.Context) []Comment {
	return c.nodes
}

func (r *Resolver) AllComments(ctx context.Context, args struct {
	Since    *graphql.ID
	PageSize int32
}) (CommentsCollection, error) {
	result := CommentsCollection{}
	mods := []qm.QueryMod{qm.Limit(int(args.PageSize))}
	if args.Since != nil {
		s := string(*args.Since)
		i, err := strconv.ParseInt(s, 10, 64)
		if err != nil {
			return result, err
		}
		mods = append(mods, qm.Offset(int(i)))
	}
	slice, err := dbmodel.Comments(r.db, mods...).All()
	if err != nil {
		return result, errors.Wrapf(err, "allComments(%#v)", args)
	}
	for _, m := range slice {
		result.nodes = append(result.nodes, Comment{model: *m, db: r.db})
	}

	return result, nil
}

func (r *Resolver) CommentByID(ctx context.Context, args struct {
	ID graphql.ID
}) (Comment, error) {
	result := Comment{}
	i, err := strconv.ParseInt(string(args.ID), 10, 64)
	if err != nil {
		return result, errors.Wrapf(err, "CommentByID(%#v)", args)
	}

	m, err := dbmodel.FindComment(r.db, int(i))
	if err != nil {
		return result, errors.Wrapf(err, "CommentByID(%#v)", args)
	} else if m == nil {
		return result, errors.New("not found")
	}
	return Comment{model: *m, db: r.db}, nil
}

func (r *Resolver) CreateComment(ctx context.Context, args struct {
	Input createCommentInput
}) (Comment, error) {
	result := Comment{}
	m := dbmodel.Comment{}
	data, err := json.Marshal(args.Input)
	if err != nil {
		return result, errors.Wrapf(err, "json.Marshal(%#v)", args.Input)
	}
	if err = json.Unmarshal(data, &m); err != nil {
		return result, errors.Wrapf(err, "json.Unmarshal(%s)", data)
	}

	if err := m.Insert(r.db); err != nil {
		return result, errors.Wrapf(err, "createComment(%#v)", m)
	}
	return Comment{model: m, db: r.db}, nil
}

func (r *Resolver) UpdateCommentByID(ctx context.Context, args struct {
	ID    graphql.ID
	Input updateCommentInput
}) (Comment, error) {
	result := Comment{}
	i, err := strconv.ParseInt(string(args.ID), 10, 64)
	if err != nil {
		return result, errors.Wrapf(err, "CommentByID(%#v)", args)
	}

	m, err := dbmodel.FindComment(r.db, int(i))
	if err != nil {
		return result, errors.Wrapf(err, "updateCommentByID(%#v)", args)
	} else if m == nil {
		return result, errors.New("not found")
	}
	data, err := json.Marshal(args.Input)
	if err != nil {
		return result, errors.Wrapf(err, "json.Marshal(%#v)", args.Input)
	}
	if err = json.Unmarshal(data, &m); err != nil {
		return result, errors.Wrapf(err, "json.Unmarshal(%s)", data)
	}

	if err := m.Update(r.db); err != nil {
		return result, errors.Wrapf(err, "updateComment(%#v)", m)
	}
	return Comment{model: *m, db: r.db}, nil
}

func (r *Resolver) DeleteCommentByID(ctx context.Context, args struct {
	ID graphql.ID
}) (Comment, error) {
	result := Comment{}
	i, err := strconv.ParseInt(string(args.ID), 10, 64)
	if err != nil {
		return result, errors.Wrapf(err, "CommentByID(%#v)", args)
	}

	m, err := dbmodel.FindComment(r.db, int(i))
	if err != nil {
		return result, errors.Wrapf(err, "updateCommentByID(%#v)", args)
	} else if m == nil {
		return result, errors.New("not found")
	}
	if err := m.Delete(r.db); err != nil {
		return result, errors.Wrapf(err, "deleteCommentByID(%#v)", m)
	}
	return Comment{model: *m, db: r.db}, nil
}
