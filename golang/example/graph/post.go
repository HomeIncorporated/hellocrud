// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package graph

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/choonkeat/hellocrud/golang/example/dbmodel"
	graphql "github.com/graph-gophers/graphql-go"
	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries/qm"
)

// NewPost returns a new Post instance
func NewPost(db boil.Executor, model dbmodel.Post) Post {
	return Post{
		model: model,
		db:    db,
	}
}

// NewPostsCollection returns a new PostsCollection instance
func NewPostsCollection(db boil.Executor, slice dbmodel.PostSlice) PostsCollection {
	result := PostsCollection{}
	for _, m := range slice {
		result.nodes = append(result.nodes, Post{db: db, model: *m})
	}
	return result
}

// Post is an object to back GraphQL type
type Post struct {
	model dbmodel.Post
	db    boil.Executor
}

// GraphQL friendly getters

// RowID is the Post GUID
func (o Post) RowID() string {
	return fmt.Sprintf("Post%d", o.model.ID) // int
}

// ID is the Post id
func (o Post) ID() graphql.ID {
	return graphql.ID(fmt.Sprintf("%d", o.model.ID)) // int
}

// Title is the Post title
func (o Post) Title() string {
	return o.model.Title // string
}

// Author is the Post author
func (o Post) Author() string {
	return o.model.Author // string
}

// Body is the Post body
func (o Post) Body() string {
	return o.model.Body // string
}

// Notes is the Post notes
func (o Post) Notes() *string {
	return o.model.Notes.Ptr() // null.String
}

// CreatedAt is the Post created_at
func (o Post) CreatedAt() *graphql.Time {
	if o.model.CreatedAt.Valid {
		return &graphql.Time{Time: o.model.CreatedAt.Time}
	}
	return nil // null.Time
}

// UpdatedAt is the Post updated_at
func (o Post) UpdatedAt() *graphql.Time {
	if o.model.UpdatedAt.Valid {
		return &graphql.Time{Time: o.model.UpdatedAt.Time}
	}
	return nil // null.Time
}

// Comments returns the list of Comments that has a foreign key pointing to Post
func (o Post) Comments() *CommentsCollection {
	if o.model.R == nil || o.model.R.Comments == nil {
		return nil
	}

	result := &CommentsCollection{}
	for _, it := range o.model.R.Comments {
		result.nodes = append(result.nodes, Comment{model: *it, db: o.db})
	}
	return result
}

// PostsCollection is the struct representing a collection of GraphQL types
type PostsCollection struct {
	nodes []Post
	// future meta data goes here, e.g. count
}

// Nodes returns the list of GraphQL types
func (c PostsCollection) Nodes(ctx context.Context) []Post {
	return c.nodes
}

// createPostInput is an object to back Post mutation (create) input type
type createPostInput struct {
	Title  string  `json:"title"`
	Author string  `json:"author"`
	Body   string  `json:"body"`
	Notes  *string `json:"notes"`
}

// updatePostInput is an object to back Post mutation (update) input type
type updatePostInput struct {
	Title  string  `json:"title"`
	Author string  `json:"author"`
	Body   string  `json:"body"`
	Notes  *string `json:"notes"`
}

// searchPostInput is an object to back Post search arguments input type
type searchPostInput struct {
	Title     *string       `json:"title"`
	Author    *string       `json:"author"`
	Body      *string       `json:"body"`
	Notes     *string       `json:"notes"`
	CreatedAt *graphql.Time `json:"created_at"`
	UpdatedAt *graphql.Time `json:"updated_at"`
}

// SearchPosts retrieves Posts based on the provided search parameters
func (r *Resolver) SearchPosts(ctx context.Context, args struct {
	SinceID    *graphql.ID
	PageNumber *int32
	PageSize   *int32
	Input      *searchPostInput
}) (PostsCollection, error) {
	result := PostsCollection{}

	mods := []qm.QueryMod{
		// TODO: Add eager loading based on requested fields
		qm.Load("Comments"),
	}

	// Pagination
	mods = append(mods, QueryModPagination(args.SinceID, args.PageNumber, args.PageSize)...)

	// Search input
	mods = append(mods, QueryModSearch(args.Input)...)

	// Retrieve model/s based on search criteria
	slice, err := dbmodel.Posts(r.db(ctx), mods...).All()
	if err != nil {
		return result, errors.Wrapf(err, "searchPosts(%#v)", args)
	}

	// Convert to GraphQL type resolver
	result = NewPostsCollection(r.db(ctx), slice)

	return result, nil
}

// PostByID retrieves Post by ID
func (r *Resolver) PostByID(ctx context.Context, args struct {
	ID graphql.ID
}) (Post, error) {
	result := Post{}
	i, err := strconv.ParseInt(string(args.ID), 10, 64)
	if err != nil {
		return result, errors.Wrapf(err, "PostByID(%#v)", args)
	}
	id := int(i)

	mods := []qm.QueryMod{
		qm.Where("id = ?", id),
		// TODO: Add eager loading based on requested fields
		qm.Load("Comments")}

	m, err := dbmodel.Posts(r.db(ctx), mods...).One()
	if err != nil {
		return result, errors.Wrapf(err, "PostByID(%#v)", args)
	} else if m == nil {
		return result, errors.New("not found")
	}
	return Post{model: *m, db: r.db(ctx)}, nil
}

// CreatePost creates a Post based on the provided input
func (r *Resolver) CreatePost(ctx context.Context, args struct {
	Input createPostInput
}) (Post, error) {
	result := Post{}
	m := dbmodel.Post{}
	data, err := json.Marshal(args.Input)
	if err != nil {
		return result, errors.Wrapf(err, "json.Marshal(%#v)", args.Input)
	}
	if err = json.Unmarshal(data, &m); err != nil {
		return result, errors.Wrapf(err, "json.Unmarshal(%s)", data)
	}

	if err := m.Insert(r.db(ctx)); err != nil {
		return result, errors.Wrapf(err, "createPost(%#v)", m)
	}
	return Post{model: m, db: r.db(ctx)}, nil
}

// UpdatePostByID updates a Post based on the provided ID and input
func (r *Resolver) UpdatePostByID(ctx context.Context, args struct {
	ID    graphql.ID
	Input updatePostInput
}) (Post, error) {
	result := Post{}
	i, err := strconv.ParseInt(string(args.ID), 10, 64)
	if err != nil {
		return result, errors.Wrapf(err, "PostByID(%#v)", args)
	}
	id := int(i)

	m, err := dbmodel.FindPost(r.db(ctx), id)
	if err != nil {
		return result, errors.Wrapf(err, "updatePostByID(%#v)", args)
	} else if m == nil {
		return result, errors.New("not found")
	}
	data, err := json.Marshal(args.Input)
	if err != nil {
		return result, errors.Wrapf(err, "json.Marshal(%#v)", args.Input)
	}
	if err = json.Unmarshal(data, &m); err != nil {
		return result, errors.Wrapf(err, "json.Unmarshal(%s)", data)
	}

	if err := m.Update(r.db(ctx)); err != nil {
		return result, errors.Wrapf(err, "updatePost(%#v)", m)
	}
	return Post{model: *m, db: r.db(ctx)}, nil
}

// DeletePostByID deletes a Post based on the provided ID
func (r *Resolver) DeletePostByID(ctx context.Context, args struct {
	ID graphql.ID
}) (Post, error) {
	result := Post{}
	i, err := strconv.ParseInt(string(args.ID), 10, 64)
	if err != nil {
		return result, errors.Wrapf(err, "PostByID(%#v)", args)
	}
	id := int(i)

	m, err := dbmodel.FindPost(r.db(ctx), id)
	if err != nil {
		return result, errors.Wrapf(err, "updatePostByID(%#v)", args)
	} else if m == nil {
		return result, errors.New("not found")
	}
	if err := m.Delete(r.db(ctx)); err != nil {
		return result, errors.Wrapf(err, "deletePostByID(%#v)", m)
	}
	return Post{model: *m, db: r.db(ctx)}, nil
}
